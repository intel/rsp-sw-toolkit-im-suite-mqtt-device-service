name: "RSP.Controller.Device.MQTT.Profile"
manufacturer: "Intel"
model: "RSP Controller"
labels:
- "RFID"
- "MQTT"
- "RSP"
- "RSP Controller"
description: "RSP Controller Device Profile"

# there must be a DeviceResource and ResourceOperation with GET for any data the
# MQTT device service will push, even if it's just event data, because the Device
# Services SDK hides nearly everything, and the only access is via the cleverly
# titled 'asyncCh' channel, which takes CommandValues (aka, responses to command
# requests). As a result, there's a lot of duplication necessary.
deviceResources:
-
  name: inventory_event
  description: "RSP Controller Event"
  attributes:
    { name: "inventory_event" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: inventory_complete
  description: "Sensor Inventory Complete"
  attributes:
    { name: "inventory_complete" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: sensor_config_notification
  description: "Sensor config notification"
  attributes:
    { name: "sensor_config_notification" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: scheduler_run_state
  description: "Scheduler run state configuration"
  attributes:
    { name: "scheduler_run_state" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: sensor_connection_state_notification
  description: "Sensor connection state notification"
  attributes:
    { name: "sensor_connection_state_notification" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: device_alert
  description: "RSP Controller Alert"
  attributes:
    { name: "device_alert" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: controller_heartbeat
  description: "RSP Controller Heartbeat"
  attributes:
    { name: "controller_heartbeat" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: heartbeat
  description: "Sensor Heartbeat"
  attributes:
    { name: "heartbeat" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: inventory_data
  description: "RSP Raw Data"
  attributes:
    { name: "inventory_data" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: rsp_status
  description: "RSP/Sensor Status"
  attributes:
    { name: "rsp_status" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: sensor_get_device_ids
  description: "list of sensors known to the RSP Controller"
  attributes:
    { name: "sensor_get_device_ids" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: behavior_get_all
  description: "all the behaviors of the RSP Controller"
  attributes:
    { name: "behavior_get_all" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: cluster_get_config
  description: "cluster configuration of the RSP Controller"
  attributes:
    { name: "cluster_get_config" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: inventory_unload
  description: "unload inventory in the RSP Controller"
  attributes:
    { name: "inventory_unload" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: upstream_get_mqtt_status
  description: "info of MQTT broker connection to RSP Controller"
  attributes:
    { name: "upstream_get_mqtt_status" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: downstream_get_mqtt_status
  description: "info of MQTT broker connection to Sensor"
  attributes:
    { name: "downstream_get_mqtt_status" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: gpio_clear_mappings
  description: "clear gpio mappings"
  attributes:
    { name: "gpio_clear_mappings" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }
-
  name: scheduler_get_run_state
  description: "run state of the scheduler"
  attributes:
    { name: "scheduler_get_run_state" }
  properties:
    value:
      { type: "String", readWrite: "R", defaultValue: "" }
    units:
      { type: "String", readWrite: "R", defaultValue: "" }

deviceCommands:
-
  name: inventory_event
  get:
    - { index: "1", operation: "get", object: "inventory_event", parameter: "inventory_event", property: "value" }
-
  name: inventory_complete
  get:
    - { index: "1", operation: "get", object: "inventory_complete", parameter: "inventory_complete", property: "value" }
-
  name: sensor_config_notification
  get:
    - { index: "1", operation: "get", object: "sensor_config_notification", parameter: "sensor_config_notification", property: "value" }
-
  name: scheduler_run_state
  get:
    - { index: "1", operation: "get", object: "scheduler_run_state", parameter: "scheduler_run_state", property: "value" }
-
  name: sensor_connection_state_notification
  get:
    - { index: "1", operation: "get", object: "sensor_connection_state_notification", parameter: "sensor_connection_state_notification", property: "value" }
-
  name: device_alert
  get:
    - { index: "1", operation: "get", object: "device_alert", parameter: "device_alert", property: "value" }
-
  name: controller_heartbeat
  get:
    - { index: "1", operation: "get", object: "controller_heartbeat", parameter: "controller_heartbeat", property: "value" }
-
  name: heartbeat
  get:
    - { index: "1", operation: "get", object: "heartbeat", parameter: "heartbeat", property: "value" }
-
  name: inventory_data
  get:
    - { index: "1", operation: "get", object: "inventory_data", parameter: "inventory_data", property: "value" }
-
  name: rsp_status
  get:
    - { index: "1", operation: "get", object: "rsp_status", parameter: "rsp_status", property: "value" }
-
  name: sensor_get_device_ids
  get:
    - { index: "1", operation: "get", object: "sensor_get_device_ids", parameter: "sensor_get_device_ids", property: "value" }
-
  name: behavior_get_all
  get:
    - { index: "1", operation: "get", object: "behavior_get_all", parameter: "behavior_get_all", property: "value" }
-
  name: cluster_get_config
  get:
    - { index: "1", operation: "get", object: "cluster_get_config", parameter: "cluster_get_config", property: "value" }
-
  name: inventory_unload
  get:
    - { index: "1", operation: "get", object: "inventory_unload", parameter: "inventory_unload", property: "value" }
-
  name: upstream_get_mqtt_status
  get:
    - { index: "1", operation: "get", object: "upstream_get_mqtt_status", parameter: "upstream_get_mqtt_status", property: "value" }
-
  name: downstream_get_mqtt_status
  get:
    - { index: "1", operation: "get", object: "downstream_get_mqtt_status", parameter: "downstream_get_mqtt_status", property: "value" }
-
  name: gpio_clear_mappings
  get:
    - { index: "1", operation: "get", object: "gpio_clear_mappings", parameter: "gpio_clear_mappings", property: "value" }
-
  name: scheduler_get_run_state
  get:
    - { index: "1", operation: "get", object: "scheduler_get_run_state", parameter: "scheduler_get_run_state", property: "value" }

coreCommands:
-
  name: sensor_get_device_ids
  get:
    path: "/api/v1/device/{deviceId}/sensor_get_device_ids"
    responses:
      -
        code: "200"
        description: "list of sensors known to the RSP Controller"
        expectedValues: ["sensor_get_device_ids"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: behavior_get_all
  get:
    path: "/api/v1/device/{deviceId}/behavior_get_all"
    responses:
      -
        code: "200"
        description: "all the behaviors of the RSP Controller"
        expectedValues: ["behavior_get_all"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: cluster_get_config
  get:
    path: "/api/v1/device/{deviceId}/cluster_get_config"
    responses:
      -
        code: "200"
        description: "cluster configuration of the RSP Controller"
        expectedValues: ["cluster_get_config"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: inventory_unload
  get:
    path: "/api/v1/device/{deviceId}/inventory_unload"
    responses:
      -
        code: "200"
        description: "unload inventory in the RSP Controller"
        expectedValues: ["inventory_unload"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: upstream_get_mqtt_status
  get:
    path: "/api/v1/device/{deviceId}/upstream_get_mqtt_status"
    responses:
      -
        code: "200"
        description: "info of MQTT broker connected to RSP Controller"
        expectedValues: ["upstream_get_mqtt_status"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: downstream_get_mqtt_status
  get:
    path: "/api/v1/device/{deviceId}/downstream_get_mqtt_status"
    responses:
      -
        code: "200"
        description: "info of MQTT connection to RSP/Sensor"
        expectedValues: ["downstream_get_mqtt_status"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: gpio_clear_mappings
  get:
    path: "/api/v1/device/{deviceId}/gpio_clear_mappings"
    responses:
      -
        code: "200"
        description: "clear gpio mappings"
        expectedValues: ["gpio_clear_mappings"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
-
  name: scheduler_get_run_state
  get:
    path: "/api/v1/device/{deviceId}/scheduler_get_run_state"
    responses:
      -
        code: "200"
        description: "run state of the scheduler"
        expectedValues: ["scheduler_get_run_state"]
      -
        code: "500"
        description: "internal server error"
        expectedValues: []
